from aiogram import Dispatcher, Bot, executor, types
from config import TOKEN
from KeyBoard import menu_kb1
from Texts import direction_1, direction_2, direction_3, direction_4, direction_5, direction_6, direction_7, about_us, full_directions

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_command(msg: types.Message):
    await msg.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ —Å—é–¥–∞‚û°Ô∏è/help‚¨ÖÔ∏è —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–ª—è —á–µ–≥–æ —Å–æ–∑–¥–∞–Ω —ç—Ç–æ—Ç –±–æ—Ç!")


@dp.message_handler(commands=['help'])
async def help_command(msg:types.Message):
    await msg.reply("–î–∞–Ω–Ω—ã–π –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ IT-Cube", reply_markup=menu_kb1)

@dp.message_handler(text=['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'])
async def direction(msg:types.Message):
    await msg.answer(full_directions, )

@dp.message_handler(text=['–û IT-Cubeüé≤'])
async def info_1(msg:types.Message):
    await msg.answer(about_us)

@dp.message_handler(text=['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python'])
async def info_1(msg:types.Message):
    await msg.answer(direction_1)

@dp.message_handler(text=['VR/AR-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'])
async def info_2(msg:types.Message):
    await msg.answer(direction_2)

@dp.message_handler(text=['–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'])
async def info_3(msg:types.Message):
    await msg.answer(direction_3)

@dp.message_handler(text=['–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'])
async def info_4(msg:types.Message):
    await msg.answer(direction_4)

@dp.message_handler(text=['–°–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'])
async def info_5(msg:types.Message):
    await msg.answer(direction_5)

@dp.message_handler(text=['–ë–µ—Å–ø–∏–ª–æ—Ç–Ω—ã–µ –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã'])
async def info_1(msg:types.Message):
    await msg.answer(direction_6)

@dp.message_handler(text=['3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ'])
async def info_6(msg:types.Message):
    await msg.answer(direction_7)



if __name__ == '__main__':
    executor.start_polling(dp)